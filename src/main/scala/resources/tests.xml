<?xml version="1.0" encoding="UTF-8"?>
<tests>
    <!-- VALUE TESTS -->
    <unit name="Null test" tag="value" type="POSITIVE">
        <test>"null"</test>
        <result >"null"</result>
    </unit>
    <unit name="True test" tag="value" type="POSITIVE">
        <test>"true"</test>
        <result >"true"</result>
    </unit>
    <unit name="False test" tag="value" type="POSITIVE">
        <test>"false"</test>
        <result >"false"</result>
    </unit>
    <unit name="StringLiteral type test" tag="value" type="POSITIVE">
        <test>"This is a stringLiteral"</test>
        <result >"This is a stringLiteral"</result>
    </unit>
    <unit name="floatingPointNumber test 1" tag="value" type="POSITIVE">
        <test>1.3000</test>
        <result >1.3</result>
    </unit>
    <unit name="floatingPointNumber test 2" tag="value" type="POSITIVE">
        <test>1.325</test>
        <result >1.325</result>
    </unit>
    <unit name="floatingPointNumber test 3" tag="value" type="POSITIVE">
        <test>1</test>
        <result >1.0</result>
    </unit>
    <!-- OBJECT TESTS -->
    <unit name="Empty object test" tag="obj" type="POSITIVE">
        <test>{}</test>
        <result>Map()</result>
    </unit>
    <unit name="Empty object test 2" tag="obj" type="POSITIVE">
        <test>{"":"","2":2}</test>
        <result>Map("" -> "", "2" -> 2.0)</result>
    </unit>
    <unit name="Null object test" tag="obj" type="POSITIVE">
        <test>{"":null,"":null}</test>
        <result>Map("" -> null)</result>
    </unit>
    <unit name="True/False object test" tag="obj" type="POSITIVE">
        <test>{"":true,"":false}</test>
        <result>Map("" -> false)</result>
    </unit>
    <unit name="More arguments object test" tag="obj" type="POSITIVE">
        <test>{"":true,"":false,"":null,"":true}</test>
        <result>Map("" -> true)</result>
    </unit>
    <unit name="More arguments object test 2" tag="obj" type="POSITIVE">
        <test>{"":true,"":false,"":null,"":true,"1":null,"F":false,"test":2}</test>
        <result>Map("" -> true, "1" -> null, "F" -> false, "test" -> 2.0)</result>
    </unit>
    <!-- ARR TESTS -->
    <unit name="arr test" tag="arr" type="POSITIVE">
        <test>["403827664","403827665"]</test>
        <result>List("403827664", "403827665")</result>
    </unit>
    <unit name="arr test newline" tag="arr" type="POSITIVE">
        <test>[
            "403827664",
            "403827665"
            ]</test>
        <result>List("403827664", "403827665")</result>
    </unit>
    <unit name="empty arr test" tag="arr" type="POSITIVE">
        <test>["",""]</test>
        <result>List("", "")</result>
    </unit>
    <unit name="empty arr test 2" tag="arr" type="POSITIVE">
        <test>[]</test>
        <result>List()</result>
    </unit>
    <unit name="empty arr with integer test" tag="arr" type="POSITIVE">
        <test>["",1]</test>
        <result>List("", 1.0)</result>
    </unit>
    <unit name="arr with floating point number test" tag="arr" type="POSITIVE">
        <test>["",1.2000]</test>
        <result>List("", 1.2)</result>
    </unit>
    <unit name="arr with null test" tag="arr" type="POSITIVE">
        <test>["null",null]</test>
        <result>List("null", null)</result>
    </unit>
    <unit name="arr with true test" tag="arr" type="POSITIVE">
        <test>["true",true]</test>
        <result>List("true", true)</result>
    </unit>
    <unit name="arr with false test" tag="arr" type="POSITIVE">
        <test>["false", false]</test>
        <result>List("false", false)</result>
    </unit>
    <!-- MEMBER TESTS -->
    <unit name="Empty member test" tag="member" type="POSITIVE">
        <test>"":""</test>
        <result >("","")</result>
    </unit>
    <unit name="Null member test" tag="member" type="POSITIVE">
        <test>"":null</test>
        <result >("",null)</result>
    </unit>
    <unit name="Null member test 2" tag="member" type="POSITIVE">
        <test>"null":null</test>
        <result >("null",null)</result>
    </unit>
    <unit name="Floating number member test 2" tag="member" type="POSITIVE">
        <test>"1.000":1.0000</test>
        <result >("1.000",1.0)</result>
    </unit>
    <unit name="Arr member test" tag="member" type="POSITIVE">
        <test>"Testing Arr":["First","Second"]</test>
        <result >("Testing Arr",List("First", "Second"))</result>
    </unit>
    <unit name="Arr member test 2" tag="member" type="POSITIVE">
        <test>"Testing Arr":[["First","Second"],["Second","Third"]]</test>
        <result >("Testing Arr",List(List("First", "Second"), List("Second", "Third")))</result>
    </unit>
    <unit name="Obj member test" tag="member" type="POSITIVE">
        <test>"Testing Arr":{"Number":"2","First":"Second","Third":"Fourth"}</test>
        <result >("Testing Arr",Map("Number" -> "2", "First" -> "Second", "Third" -> "Fourth"))</result>
    </unit>
    <unit name="True member test" tag="member" type="POSITIVE">
        <test>"Testing Arr":true</test>
        <result >("Testing Arr",true)</result>
    </unit>
    <unit name="False member test" tag="member" type="POSITIVE">
        <test>"Testing Arr":false</test>
        <result >("Testing Arr",false)</result>
    </unit>
    <unit name="String literal member test" tag="member" type="POSITIVE">
        <test>"true":{"Number":"2","First":"Second","Third":"Fourth"}</test>
        <result >("true",Map("Number" -> "2", "First" -> "Second", "Third" -> "Fourth"))</result>
    </unit>
    <!-- MEMBER TESTS -->
    <unit name="multiple json test" tag="multiple" type="POSITIVE">
        <test>{
            "address book": {
            "name": "White Jean",
            "address": {
            "street": "Street 1",
            "city":"Huntington Beach",
            "zip":"92647"
            },
            "phone number":[
            "403827664",
            "403827665"
            ]
            }
            }

            {
            "address book": {
            "name": "Speri Pietro",
            "address": {
            "street": "Street 2",
            "city":"Huntington Beach",
            "zip":"92647"
            },
            "phone number":[
            "403827666",
            "403827667"
            ]
            }
            }

        </test>
        <result >List(Map("address book" -> Map("name" -> "White Jean", "address" -> Map("street" -> "Street 1", "city" -> "Huntington Beach", "zip" -> "92647"), "phone number" -> List("403827664", "403827665"))), Map("address book" -> Map("name" -> "Speri Pietro", "address" -> Map("street" -> "Street 2", "city" -> "Huntington Beach", "zip" -> "92647"), "phone number" -> List("403827666", "403827667"))))</result>
    </unit>
    <!-- ARGPARSER TESTS -->
    <unit name="Testing tests" tag="argParser" type="POSITIVE">
        <test>-f C:\Users\pietro.speri\IdeaProjects\jsonHandler\src\main\scala\resources\jsonExample.json -t y -s $</test>
        <result>Map('InputFile -> C:\Users\pietro.speri\IdeaProjects\jsonHandler\src\main\scala\resources\jsonExample.json, 'TestLauncher -> y, 'Separator -> $)</result>
    </unit>
    <unit name="Double obj Param test" tag="argParser" type="POSITIVE">
        <test>-f C:\Users\pietro.speri\IdeaProjects\jsonHandler\src\main\scala\resources\jsonExample.json -t y -s $ -k key -k key</test>
        <result>Map('InputFile -> C:\Users\pietro.speri\IdeaProjects\jsonHandler\src\main\scala\resources\jsonExample.json, 'TestLauncher -> y, 'Separator -> $, 'Key -> key)</result>
    </unit>
    <unit name="Double test Param test" tag="argParser" type="POSITIVE">
        <test>-f C:\Users\pietro.speri\IdeaProjects\jsonHandler\src\main\scala\resources\jsonExample.json -t y -t n -s $ -k key</test>
        <result>Map('InputFile -> C:\Users\pietro.speri\IdeaProjects\jsonHandler\src\main\scala\resources\jsonExample.json, 'TestLauncher -> n, 'Separator -> $, 'Key -> key)</result>
    </unit>
    <unit name="Double input file Param test" tag="argParser" type="POSITIVE">
        <test>-f C:\Users\pietro.speri\IdeaProjects\jsonHandler\src\main\scala\resources\jsonExample.json -f file2.json -t y -t n -s $ -k key</test>
        <result>Map('InputFile -> file2.json, 'TestLauncher -> n, 'Separator -> $, 'Key -> key)</result>
    </unit>
    <unit name="Double sep Param test" tag="argParser" type="POSITIVE">
        <test>-f C:\Users\pietro.speri\IdeaProjects\jsonHandler\src\main\scala\resources\jsonExample.json -t y -t n -s $ -s @ -k key</test>
        <result>Map('InputFile -> C:\Users\pietro.speri\IdeaProjects\jsonHandler\src\main\scala\resources\jsonExample.json, 'TestLauncher -> n, 'Separator -> @, 'Key -> key)</result>
    </unit>
</tests>

