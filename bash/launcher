#!/bin/bash
##PIETRO SPERI

ARGSREQUIRED=1
MAXARGS=4
LOG_FILE=log.info
OPTARGS=("MEMBER","ARRAY","OBJECT")
SEPARATOR="|"

if [ -z ${LOG_FILE} ]; then
	rm -f ${LOG_FILE}
fi

usage(){
	echo -e "\e[33m USAGE: ./launcher.sh -f [JSON FILE][REQUIRED] [-][OPTIONAL PARAMETERS] \e[0m"
	echo -e "\e[33m OPTION -f : allows to specify the file name to pass as input(JSON format file) - [REQUIRED] \e[0m"
	echo -e "\e[33m OPTION -o : allows to specify the option to use for the parser. It can be MEMBER, ARRAY or OBJECT only - [OPTIONAL] \e[0m"
	echo -e "\e[33m OPTION -s : allows to customize the separator character (if required) to use for the output file - [OPTIONAL] \e[0m"
	echo -e "\e[33m OPTION -p : allows to launch the program in a parallel way over a list of json files passed as input - [OPTIONAL] \e[0m"
	echo -e "\e[32m EXAMPLE: ./launcher.sh -m /path/to/your/file/bestFile.json [REQUIRED] -s '|' [OPTIONAL PARAMETER] \e[0m"
	exit 1
}

timer(){
	PROCESS=$1
	ELAPSED=$TIME
	echo -e "\e[0;32m $1 FINISHED. TIME TAKEN(HH:mm:SS): $(($ELAPSED / 3600))HH:$(($ELAPSED / 60 % 60))mm:$(($ELAPSED % 60))SS \e[0m"
}

##Checking parameters
paramsCheck(){
	if [ -z $2 ] || [ ${2:0:1} == "-" ]; then
		echo -e "\e[0;31m ERROR: THE PARAMETER PASSED SHOULD START WITH THE CHARACTER '-' [$1:$2]\e[0m" | tee -A ${LOG_FILE}
		usage
	fi
}

##Parameters
while test $# -gt 0
        do
    case $1 in
		-f|--jsonfile)
		shift
		JSON_FILE=$1
		ARGS+=(JSON_FILE)
		echo -e "\e[0;33m JSON FILE: $1 \e[0m"
		;;
		-o|--opt)
		shift
		OPT=$1
		ARGS+=(OPT)
		echo -e "\e[0;33m OPT: $1 \e[0m"
		;;
		-s|--separator)
		shift
		SEPARATOR=$1
		ARGS+=(OBJECT)
		echo -e "\e[0;33m SEPARATOR: $1 \e[0m"
		;;
		-p|--parallel)
		shift
		PARALLEL=$1
		ARGS+=(OBJECT)
		echo -e "\e[0;33m PARALLEL: $1 \e[0m"
		;;
		*)
		echo -e "\e[0;31m ERROR. Invalid argument: $1 \e[0m"
		exit 1
		;;
        esac
        shift
done

TIME=0

if [[ ${#ARGS[@]} -lt $ARGSREQUIRED ]] || [[ ${#ARGS[@]} -gt $MAXARGS ]]; then
	echo -e "\e[0;31m THE NUMBER OF ARGUMENTS PASSED IS WRONG \e0[m" | tee -A ${LOG_FILE}
	usage
fi

if [[ ! ${ARGS[@]} =~ ${JSON_FILE} ]]; then
	echo -e "\e[0;31m THE JSON_FILE HAS TO BE PASSED AS ARGUMENT! \e0[m" | tee -A ${LOG_FILE}
	usage
else if [[ ${OPTARGS} =~ ${OPT} ]]; then
	echo -e "\e[0;31m THE -o OPTION SPECIFIED CAN ONLY BE: MEMBER, ARRAY, OBJECT. \e[0m" | tee -A ${LOG_FILE}
	usage
else if [[ ! ${ARGS[@]} =~ ${OPT} ]] && [[ ! ${ARGS[@]} =~ ${SEPARATOR} ]] && [[ ! ${ARGS} =~ ${PARALLEL} ]];then
	echo -e "\e[0;32m LAUNCHING PLAIN JSON HANDLER. \e[0m" | tee -A ${LOG_FILE}
	##command here
else if [[ ${ARGS[@]} =~ ${OPT} ]] && [[ ! ${ARGS[@]} =~ ${SEPARATOR} ]] && [[ ! ${ARGS} =~ ${PARALLEL} ]];then 
	echo -e "\e[0;32m LAUNCHING JSON HANDLER WITH -o ARGUMENT ${OPT}. \e[0m" | tee -A ${LOG_FILE}
	##command here
else if [[ ${ARGS[@]} =~ ${OPT} ]] && [[ ${ARGS[@]} =~ ${SEPARATOR} ]] && [[ ! ${ARGS} =~ ${PARALLEL} ]];then 
	echo -e "\e[0;32m LAUNCHING JSON HANDLER WITH -o ARGUMENT ${OPT} AND -s ARGUMENT ${SEPARATOR}. \e[0m" | tee -A ${LOG_FILE}
	##command here
else if [[ ${ARGS[@]} =~ ${OPT} ]] && [[ ${ARGS[@]} =~ ${SEPARATOR} ]] && [[ ${ARGS} =~ ${PARALLEL} ]];then 
	echo -e "\e[0;32m LAUNCHING JSON HANDLER WITH -o ARGUMENT ${OPT}, -s ARGUMENT ${SEPARATOR}, -p ARGUMENT ${PARALLEL}. \e[0m" | tee -A ${LOG_FILE}
	##command here
else if [[ ${ARGS[@]} =~ ${OPT} ]] && [[ ! ${ARGS[@]} =~ ${SEPARATOR} ]] && [[ ${ARGS} =~ ${PARALLEL} ]];then 
	echo -e "\e[0;32m LAUNCHING JSON HANDLER WITH -o ARGUMENT ${OPT} AND -p ARGUMENT ${PARALLEL}. \e[0m" | tee -A ${LOG_FILE}
	##command here
else if [[ ! ${ARGS[@]} =~ ${OPT} ]] && [[ ${ARGS[@]} =~ ${SEPARATOR} ]] && [[ ${ARGS} =~ ${PARALLEL} ]];then 
	echo -e "\e[0;32m LAUNCHING JSON HANDLER WITH -s ARGUMENT ${SEPARATOR} AND -p ARGUMENT ${PARALLEL}. \e[0m" | tee -A ${LOG_FILE}
	##command here
fi

timer("LAUNCHER")
